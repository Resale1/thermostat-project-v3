substitutions:
  name: "remote"
  room: "pool" # Room Name
  thermostat_entity: "climate.pool_thermostat"

  default_low: "26.67"  #80
  default_mid: "30.0"   #86
  default_hi: "31.11"   #88

globals:
  - id: _ready
    type: bool
    initial_value: 'false'

web_server:
  port: 80
  include_internal: true

esphome:
  name: ${room}-${name}
  on_boot:
    then:      
      - display.page.show: starting_page
      - delay: 5s    
      - lambda: |-
          id(_ready) = true;       
      - delay: 3s 
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  logs:
    climate: debug
    sensor: debug
    switch: debug
    resistance: none
    adc: none
    display: none

# Enable Home Assistant API
api:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-9B23Ac"
    password: "sgxEvvkmlX6x"

captive_portal:


# Example configuration entry for ESP32
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a    
  frequency: 400kHz

text_sensor:
  - platform: homeassistant
    id: thermostat
    entity_id: ${thermostat_entity}
    internal: true

sensor:
# If you wish to use the current temperature from your thermostat, replace the following code block with the commmented code.
  # - platform: homeassistant
  #   id: current_temperature
  #   entity_id: ${temperature_entity}
  #   internal: true
  - platform: homeassistant
    id: current_temperature
    entity_id: ${thermostat_entity}
    attribute: current_temperature
    internal: true

  - platform: homeassistant
    id: target_temperature
    entity_id: ${thermostat_entity}
    attribute: temperature
    internal: true

  # Reports the WiFi signal strength/RSSI in dB
  - platform: wifi_signal 
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  # Reports the WiFi signal strength in %
  - platform: copy 
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
####### BEGIN ROTARY ENCODER #################    
  - platform: rotary_encoder
    id: encoder
    pin_a:
      number: 17
      mode: INPUT_PULLUP
    pin_b:
      number: 16
      mode: INPUT_PULLUP
    filters:
      debounce: 30ms
    on_clockwise:
      - display_menu.down: this_graphical_display_menu
    on_anticlockwise:
      - display_menu.up: this_graphical_display_menu

switch:
binary_sensor:
  - platform: template
    id: fire

### ROTARY ENCODER BUTTON 
  - platform: gpio
    id: button
    pin: 
      number: GPIO15
      inverted: true
    filters:
      - delayed_on: 30ms
      - delayed_off: 30ms
    on_press:
    - if:
        condition:
          display_menu.is_active: this_graphical_display_menu
        then:
          - display_menu.enter: this_graphical_display_menu
        else:
          - display_menu.show:  this_graphical_display_menu

##### SETTINGS MENU ###############
graphical_display_menu:
  id: this_graphical_display_menu
  display: oled1
  font: font_xsmall
  on_redraw:
    then:
      component.update: oled1
  active: false
  mode: rotary
  items:
    - type: number
      text: "Set Temp "
      number: set_temp
      on_enter: 
        then:
          - number.set:
              id: set_temp
              value: !lambda return id(target_temperature).state * (9.0/5.0) + 32.0;
      on_leave:
        then:
          - homeassistant.service:
              service: climate.set_temperature 
              data:
                entity_id: ${thermostat_entity}
                temperature: !lambda return id(set_temp).state;
    - type: select
      text: "Preset"
      immediate_edit: false
      select: presets
      on_leave:
        then:
          - homeassistant.service:
              service: climate.set_preset_mode
              data:
                entity_id: ${thermostat_entity}
                preset_mode: !lambda return (it->get_value_text().c_str());
    - type: menu
      text: "PRESETS"
      items:
        - type: command
          text: "Heat Low"
          on_value:
            then:
              - homeassistant.service:
                  service: climate.set_preset_mode
                  data:
                    entity_id: ${thermostat_entity}
                    preset_mode: "Heat Low"                    
        - type: command
          text: "Heat Med"
          on_value:
            then:
              - homeassistant.service:
                  service: climate.set_preset_mode
                  data:
                    entity_id: ${thermostat_entity}
                    preset_mode: "Heat Medium"   
        - type: command
          text: "Heat High"
          on_value:
            then:
              - homeassistant.service:
                  service: climate.set_preset_mode
                  data:
                    entity_id: ${thermostat_entity}
                    preset_mode: "Heat High"   
        - type: back
          text: "BACK"  
    - type: command
      text: "Exit Settings"
      on_value:
        - display_menu.hide: this_graphical_display_menu
        - display.page.show: main_page 
        - component.update: oled1
      
number:
  - platform: template
    id: set_temp
    internal: true
    optimistic: true
    step: .5
    min_value: 70
    max_value: 95
    on_value:
      then:
        lambda: 'ESP_LOGI("set_temp changed to: ", "value: %f", x);'

  - platform: template
    id: target_temperature_f
    step: .5
    min_value: 70.0
    max_value: 95.0
    lambda: 'return id(target_temperature).state * (9.0/5.0) + 32.0;'
    set_action:
      then:
        lambda: 'ESP_LOGI("set_temp changed to: ", "value: %f", x);'

  - platform: template
    id: current_temperature_f
    step: .5
    min_value: 70.0
    max_value: 95.0
    internal: true
    lambda: 'return id(current_temperature).state * (9.0/5.0) + 32.0;'
    set_action:
      then:
        lambda: 'ESP_LOGI("set_temp changed to: ", "value: %f", x);'          
select:
  - platform: template
    internal: true
    id: presets
    optimistic: true
    options:
      - "Heat Low"
      - "Heat Medium"
      - "Heat High"

####### END SETTINGS MENU ##################    
interval:
  - interval: 10s
    then:
      - delay: 500ms #IMPORTANT
      - logger.log: 
          format: "---> Water Temp - %.1f °F | Set Point: %.2f °F <---"
          args: [' id(current_temperature).state','id(target_temperature).state' ]
      
  - interval: 5s
    then:
      - if:
          condition:            
            - lambda: 'return id(_ready);'
          then:
            - if:
                condition:
                  display_menu.is_active: this_graphical_display_menu
                then:
                  - display_menu.show:  this_graphical_display_menu
                else:
                  - if:
                      condition:
                        - display.is_displaying_page: main_page
                      then:
                        - display.page.show: graph_page   
                      else:
                        - display.page.show: main_page
                  - component.update: oled1
      
display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: oled1
    address: 0x3C
    pages:
      - id: main_page
        lambda: |-      
          if (id(fire).state) {id(ani_fire).next_frame(); it.image(0, 0, id(ani_fire));}    
          else {it.image(0, 0, id(home_thermometer));}
          it.print(64, 0,  id(font1), TextAlign::TOP_CENTER, "${room}");
          it.printf(64, 7, id(font_big), TextAlign::TOP_CENTER, " %.1f°", id(current_temperature).state);
          it.printf(0, 64, id(font_small), TextAlign::BASELINE_LEFT, "SET:%.1f°", id(target_temperature).state);
    #      it.printf(5, 0, id(OpenSans), "temp: %.1f", id(current_temperature).state);
    #      it.graph(0, 22, id(single_temperature_graph));
      - id: graph_page
        lambda: |-      
          it.printf(64, 0, id(font1),TextAlign::TOP_CENTER, "TEMP %.1f", id(current_temperature).state);
          it.graph(0, 18, id(temp_target_graph));
      - id: starting_page
        lambda: |-
          it.print(64,0,id(font1),TextAlign::TOP_CENTER,"POOL BOSS");
          it.print(64,12,id(font_small),TextAlign::TOP_CENTER,"STARTING");
          it.printf(64,30, id(font_small),TextAlign::TOP_CENTER,"READY: %s", id(_ready) ? "YES" : "NO");
graph:
  # Show bare-minimum auto-ranged graph
  - id: temp_target_graph
    duration: 1h
#    x_grid: 15min
#    y_grid: false
    width: 128
    height: 46
    border: true
    min_value: 75
    max_value: 95
    min_range: 10
    max_range: 10
    traces:
      - sensor: current_temperature
        line_type: solid
        line_thickness: 1
      - sensor: target_temperature
        line_type: solid
        line_thickness: 2

animation:
  - file: "_icons/thermostat/fire.gif"
    id: ani_fire
image:
  - file: "_icons/thermostat/home-thermometer.png"
    id: home_thermometer
  - file: "_icons/thermostat/arrow-left-circle-outline.png"
    id: arrow_left
  - file: "_icons/thermostat/arrow-right-circle-outline.png"
    id: arrow_right
  - file: "_icons/thermostat/lightbulb-on-outline.png"
    id: bulb
font:
  - file: "_fonts/nasalization.ttf"
    id: font1
    size: 20

  - file: "_fonts/refsan.ttf"
    id: font_big
    size: 40

  - file: "_fonts/refsan.ttf"
    id: font3
    size: 22
  - file: "_fonts/refsan.ttf"
    id: font_small
    size: 16  
  - file: "_fonts/refsan.ttf"
    id: font_xsmall
    size: 14    
  - file: "_fonts/BebasNeue-Regular.ttf"
    id: font_cond
    size: 16   
  - file: "gfonts://Roboto"
    id: roboto
    size: 14